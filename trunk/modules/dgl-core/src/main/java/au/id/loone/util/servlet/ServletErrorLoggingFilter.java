package au.id.loone.util.servlet;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Date;
import javax.servlet.Filter;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import au.id.loone.util.exception.FatalException;
import au.id.loone.util.DGLStringUtil;
import au.id.loone.util.DGLDateTimeUtil;

import org.apache.log4j.Logger;

/**
 * A servlet filter that logs exceptions generated by servlets that it serves.
 *
 * <p>This filter simply passes requests down the filter chain.
 *      It catches <b>any<b> exceptions thrown by the downstream filer chain and logs them.
 *      If the exception caught is an instance of {@link FatalException},
 *      then the exception is logged directly.
 *      If the exception is anything else,
 *      then an instance of {@link FatalException} is constructed and logged.
 *      The original exception is then re-thrown.</p>
 *
 * <p>The exception is logged using a Log4j logger.
 *      The name of the logger can be specified by a filter init parameter.</p>
 *
 * <p>The filter accepts the following init params:</p>
 * <table align="center" border="1" cellpadding="3" cellspacing="0" width="90%">
 *      <tr>
 *          <th>name</th>
 *          <th>description</th>
 *      </tr>
 *      <tr>
 *          <td align="left" valign="top"><code>logger</code></td>
 *          <td align="left" valign="top">The name of the logger to log fatal errors against.
 *              If not specified,
 *              a value of "<code>FATAL_ERROR_LOGGER</code>" is used,
 *              as specified by {@link #LOGGER_INIT_PARAM_NAME}.</td>
 *      </tr>
 *      <tr>
 *          <td align="left" valign="top"><code>tag</code></td>
 *          <td align="left" valign="top">The tag to use for constructing new
 *              {@link FatalException fatal exceptions}.
 *              If not specified,
 *              a value of "<code>FATAL_EXCEPTION</code> is used,
 *              as specified by {@link #TAG_INIT_PARAM_NAME}.</td>
 *      </tr>
 * </table>
 *
 * @author David G Loone
 */
public class ServletErrorLoggingFilter
        implements Filter
{

    @SuppressWarnings({"UnusedDeclaration"})
    private static final Logger LOG = Logger.getLogger(ServletErrorLoggingFilter.class);

    /**
     * The default logger to use for fatal exceptions.
     */
    public static final String DEFAULT_LOGGER = "FATAL_ERROR_LOGGER";

    /**
     * The name of the filter init parameter that contains the logger to use.
     */
    public static final String LOGGER_INIT_PARAM_NAME = "logger";

    /**
     * The default tag.
     */
    public static final String DEFAULT_TAG = "FATAL_EXCEPTION";

    /**
     * The name of the filter init parameter that contains the exception tag to use.
     */
    public static final String TAG_INIT_PARAM_NAME = "tag";

    /**
     * The tag to use for constructing new fatal exceptions.
     */
    private String tag = DEFAULT_TAG;

    /**
     * The logger to use for fatal exceptions.
     */
    private Logger logger = Logger.getLogger(DEFAULT_LOGGER);

    /**
     */
    public ServletErrorLoggingFilter()
    {
        super();
    }

    /**
     */
    public void init(
            final FilterConfig filterConfig
    )
            throws ServletException
    {
        // See if the tag was specified.
        {
            final String tagStr = filterConfig.getInitParameter(TAG_INIT_PARAM_NAME);
            if (!DGLStringUtil.isNullOrEmpty(tagStr)) {
                tag = tagStr;
            }
        }

        // See if the logger was specified.
        {
            final String loggerStr = filterConfig.getInitParameter(LOGGER_INIT_PARAM_NAME);
            if (!DGLStringUtil.isNullOrEmpty(loggerStr)) {
                logger = Logger.getLogger(loggerStr);
            }
        }
    }

    /**
     */
    @SuppressWarnings({"ThrowableInstanceNeverThrown"})
    public void doFilter(
            final ServletRequest request,
            final ServletResponse response,
            final FilterChain filterChain
    )
            throws IOException, ServletException
    {
        try {
            filterChain.doFilter(request, response);
        }
        catch (final FatalException fe) {
            setRequest(fe, request);
            logger.error(fe);
            throw fe;
        }
        catch (final RuntimeException e) {
            final FatalException fe = new FatalException(tag);
            setRequest(fe, request);
            logger.error(fe);
            // Throw the original exception, not the FatalException.
            throw e;
        }
        catch (final Error e) {
            final FatalException fe = new FatalException(tag);
            setRequest(fe, request);
            logger.error(fe);
            // Throw the original error, not the FatalException.
            throw e;
        }
    }

    /**
     */
    public void destroy()
    {
        // Nothing to do.
    }

    /**
     *  Tells this exception object about the HTTP request that was in effect
     *  at the time the exception was thrown.
     *
     *  @param request
     *      The HTTP servlet request that was in effect at the time the exception was thrown.
     *      Information of interest is extracted from this object and put into the exception,
     *      but a reference to the object itself is <b>not</b> kept.
     */
    public final void setRequest(
            final FatalException fe,
            final ServletRequest request
    )
    {
        if ((request != null) &&
                !fe.getAttributes().containsKey("request.method")) {
            fe.addProperty(request, "request.method");
            fe.addProperty(request, "request.remoteUser");
            fe.addProperty(request, "request.requestedSessionId");
            fe.addProperty(request, "request.remoteAddr");
            fe.addProperty(request, "request.remoteHost");
            // Record the attributes.
            for (final Enumeration i = request.getAttributeNames(); i.hasMoreElements(); ) {
                final String name = (String)i.nextElement();
                final Object value = request.getAttribute(name);
                if (value == null) {
                    fe.setAttribute("request.attributes." + name, "null");
                }
                else {
                    fe.setAttribute("request.attributes." + name + ".class",
                            value.getClass().getName());
                }
            }
            if (request instanceof HttpServletRequest) {
                final HttpServletRequest httpRequest = (HttpServletRequest)request;
                // Record the headers.
                for (final Enumeration i = httpRequest.getHeaderNames(); i.hasMoreElements(); ) {
                    final String name = (String)i.nextElement();
                    fe.setAttribute("request.header." + name, httpRequest.getHeader(name));
                }
                // Record some sessin data.
                final HttpSession session = httpRequest.getSession();
                if (session != null) {
                    fe.setAttribute("request.session.creationTime",
                            DGLDateTimeUtil.formatAsISO8601(new Date(session.getCreationTime())));
                    fe.setAttribute("request.sesion.lastAccessedTime",
                            DGLDateTimeUtil.formatAsISO8601(new Date(session.getLastAccessedTime())));
                    fe.setAttribute("request.session.new", session.isNew());
                    for (final Enumeration i = session.getAttributeNames(); i.hasMoreElements(); ) {
                        final String name = (String)i.nextElement();
                        final Object value = session.getAttribute(name);
                        if (value == null) {
                            fe.setAttribute("request.session.attributes." + name, "null");
                        }
                        else {
                            fe.setAttribute("request.session.attributes." + name + ".class",
                                    value.getClass().getName());
                        }
                    }
                }
            }
        }
    }

}
